# users api for swagger

paths:
  /users/login:
    post:
      tags:
        - users
      summary: 로그인
      description: ''
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tokens:
                    type: object
                    example:
                      {
                        accessToken: ACCESS-1A3BJOJAPEOJRPA3JRAFEJIJ3434R2,
                        refreshToken: REFRESH-19WAHR093HAR89AWHG9H0A,
                      }

        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'
  /users/refresh:
    get:
      tags:
        - users
      summary: 토큰 재발급 라우터
      description: ''
      operationId: refreshToken
      parameters:
        - name: authorization
          in: header
          description: an authorization header
          required: true
          type: string
        - name: refresh
          in: header
          description: an authorization header
          required: true
          type: string
      responses:
        '401':
          description: 'access token에 대한 권한 없음 or 새로운 로그인 필요'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'No Authorization for Access Token /or/ No Authorization, MAKE A NEW LOGIN'
        '200':
          description: '발급 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: 'RREAGIN430THA08042U59-4AJTERAAA'
        '403':
          description: '유효하지 않은 토큰 정보'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Invalid Access Token'
        '202':
          description: '아직 토큰이 만료 안됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access Token is not expired'
        '400':
          description: 'Access, Refresh Token 둘다 필요함'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'AAccess token and Refresh Token are needed for refresh'

  /users/logout:
    get:
      tags:
        - users
      summary: 로그아웃
      description: ''
      operationId: logoutUser
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            $ref: '#/components/schemas/Cookie'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users/signup:
    post:
      tags:
        - users
      summary: 회원가입
      description: ''
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users/nicknamedupcheck:
    put:
      tags:
        - users
      summary: 닉네임 중복 체크
      description: ''
      operationId: checkNickname
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nickname'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDupCheck'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailDupCheck'

  /users/emaildupcheck:
    put:
      tags:
        - users
      summary: 이메일 중복 체크
      description: ''
      operationId: checkEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDupCheck'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailDupCheck'

  /users/sendauthmail:
    post:
      tags:
        - users
      summary: '이메일 인증메일 보내기'
      description: ''
      operationId: sendAuthMail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users/checkauth:
    put:
      tags:
        - users
      summary: '이메일 인증번호 확인'
      description: ''
      operationId: checkAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthNum'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users/checkbarowner:
    put:
      tags:
        - users
      summary: '사장님 확인'
      description: '일단 닉네임 보내는 걸로 했는데 다시 정해야 함.'
      operationId: checkBarOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nickname'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarOwnerCheck'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users/checkbartender:
    put:
      tags:
        - users
      summary: 바텐더 확인
      description: 일단 닉네임 보내는 걸로 했는데 다시 정해야 함.
      operationId: checkBartender
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nickname'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BartenderCheck'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

  /users:
    put:
      tags:
        - users
      summary: 회원정보수정
      description: 닉네임만 바꿀 수 있음
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nickname'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'

    delete:
      tags:
        - users
      summary: 회원 탈퇴
      description: ''
      operationId: deleteUser
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            $ref: '#/components/schemas/Cookie'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fail'
